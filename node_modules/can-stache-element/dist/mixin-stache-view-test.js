"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var QUnit = require("steal-qunit");

var stache = require("can-stache");

var mixinStacheView = require("./mixin-stache-view");

var browserSupports = require("../test/helpers").browserSupports;

QUnit.module("can-stache-element - mixin-stache-view");

if (browserSupports.customElements) {
  QUnit.test("basics", function (assert) {
    var StacheElement = /*#__PURE__*/function (_mixinStacheView) {
      _inherits(StacheElement, _mixinStacheView);

      var _super = _createSuper(StacheElement);

      function StacheElement() {
        _classCallCheck(this, StacheElement);

        return _super.apply(this, arguments);
      }

      return StacheElement;
    }(mixinStacheView(HTMLElement));

    var App = /*#__PURE__*/function (_StacheElement) {
      _inherits(App, _StacheElement);

      var _super2 = _createSuper(App);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return "{{greeting}} World";
        }
      }]);

      function App() {
        var _this;

        _classCallCheck(this, App);

        _this = _super2.call(this);
        _this.greeting = "Hello";
        return _this;
      }

      return App;
    }(StacheElement);

    customElements.define("stache-app", App);
    var app = new App();
    assert.equal(_typeof(app.render), "function", "mixin adds a render method on class instances");
    app.render();
    assert.equal(app.innerHTML, "Hello World", "render method renders the static `view` property as stache");
  });

  if (browserSupports.shadowDOM) {
    QUnit.test("can render into shadowDOM", function (assert) {
      var StacheElement = /*#__PURE__*/function (_mixinStacheView2) {
        _inherits(StacheElement, _mixinStacheView2);

        var _super3 = _createSuper(StacheElement);

        function StacheElement() {
          _classCallCheck(this, StacheElement);

          return _super3.apply(this, arguments);
        }

        return StacheElement;
      }(mixinStacheView(HTMLElement));

      var App = /*#__PURE__*/function (_StacheElement2) {
        _inherits(App, _StacheElement2);

        var _super4 = _createSuper(App);

        _createClass(App, null, [{
          key: "view",
          get: function get() {
            return "{{greeting}} World";
          }
        }]);

        function App() {
          var _this2;

          _classCallCheck(this, App);

          _this2 = _super4.call(this);
          _this2.viewRoot = _this2.attachShadow({
            mode: "open"
          });
          _this2.greeting = "Hello";
          return _this2;
        }

        return App;
      }(StacheElement);

      customElements.define("stache-shadow-dom-app", App);
      var app = new App();
      assert.equal(_typeof(app.render), "function", "mixin adds a render method on class instances");
      app.render();
      assert.equal(app.shadowRoot.innerHTML, "Hello World", "render method renders the static `view` property as stache");
    });
  }

  QUnit.test("caches renderer function", function (assert) {
    assert.expect(3);

    var App = /*#__PURE__*/function (_mixinStacheView3) {
      _inherits(App, _mixinStacheView3);

      var _super5 = _createSuper(App);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          assert.ok(true, "view property read");
          return "{{greeting}} World";
        }
      }]);

      function App() {
        var _this3;

        _classCallCheck(this, App);

        _this3 = _super5.call(this);
        _this3.greeting = "Hello";
        return _this3;
      }

      return App;
    }(mixinStacheView(HTMLElement));

    customElements.define("stache-caches-view-app", App);
    var app = new App();
    app.render();
    assert.equal(app.innerHTML, "Hello World", "renders first app");
    var app2 = new App();
    app2.render();
    assert.equal(app2.innerHTML, "Hello World", "renders second app");
  });
  QUnit.test("can be passed a renderer function as the view", function (assert) {
    var renderer = stache("{{greeting}} World");

    var App = /*#__PURE__*/function (_mixinStacheView4) {
      _inherits(App, _mixinStacheView4);

      var _super6 = _createSuper(App);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return renderer;
        }
      }]);

      function App() {
        var _this4;

        _classCallCheck(this, App);

        _this4 = _super6.call(this);
        _this4.greeting = "Hello";
        return _this4;
      }

      return App;
    }(mixinStacheView(HTMLElement));

    customElements.define("stache-renderer-app", App);
    var app = new App();
    app.render();
    assert.equal(app.innerHTML, "Hello World", "render method renders the static `view` property as stache");
  });
  QUnit.test("element works without a `view`", function (assert) {
    var App = /*#__PURE__*/function (_mixinStacheView5) {
      _inherits(App, _mixinStacheView5);

      var _super7 = _createSuper(App);

      function App() {
        _classCallCheck(this, App);

        return _super7.apply(this, arguments);
      }

      return App;
    }(mixinStacheView(HTMLElement));

    customElements.define("stache-no-renderer-app", App);
    var app = new App();
    app.render({});
    assert.ok(true, "doesn't throw");
  });
  QUnit.test("supports `scope.vm` lookups in the view", function (assert) {
    var StacheElement = /*#__PURE__*/function (_mixinStacheView6) {
      _inherits(StacheElement, _mixinStacheView6);

      var _super8 = _createSuper(StacheElement);

      function StacheElement() {
        _classCallCheck(this, StacheElement);

        return _super8.apply(this, arguments);
      }

      return StacheElement;
    }(mixinStacheView(HTMLElement));

    var App = /*#__PURE__*/function (_StacheElement3) {
      _inherits(App, _StacheElement3);

      var _super9 = _createSuper(App);

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return "{{ scope.vm.greeting }} World";
        }
      }]);

      function App() {
        var _this5;

        _classCallCheck(this, App);

        _this5 = _super9.call(this);
        _this5.greeting = "Hello";
        return _this5;
      }

      return App;
    }(StacheElement);

    customElements.define("stache-scope-vm", App);
    var app = new App();
    assert.equal(_typeof(app.render), "function", "mixin adds a render method on class instances");
    app.render();
    assert.equal(app.innerHTML, "Hello World", "render method renders the static `view` property as stache");
  });
}