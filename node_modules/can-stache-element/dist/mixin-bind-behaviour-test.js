"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var QUnit = require("steal-qunit");

var StacheElement = require("./can-stache-element");

var type = require("can-type");

var _require = require("can-observable-bindings"),
    fromAttribute = _require.fromAttribute;

var canReflectDeps = require("can-reflect-dependencies");

var dev = require("can-test-helpers").dev;

var testHelpers = require("../test/helpers");

var browserSupports = testHelpers.browserSupports;
var fixture;
QUnit.module("can-stache-element - mixin-bind-behaviour", {
  beforeEach: function beforeEach() {
    fixture = document.querySelector("#qunit-fixture");
  }
});

if (browserSupports.customElements) {
  QUnit.test("can set attribute from properties", function (assert) {
    var BasicBindingsElement = /*#__PURE__*/function (_StacheElement) {
      _inherits(BasicBindingsElement, _StacheElement);

      var _super = _createSuper(BasicBindingsElement);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _super.apply(this, arguments);
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "<h1>{{fname}} {{lname}}</h1>";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            fname: {
              type: type.maybeConvert(String),
              bind: fromAttribute
            },
            lname: {
              type: type.maybeConvert(String),
              bind: fromAttribute
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("set-attribute", BasicBindingsElement);
    var el = document.createElement('set-attribute');
    fixture.appendChild(el);
    assert.equal(el.getAttribute('fname'), undefined, 'We have not initialized the attribute');
    assert.equal(el.fname, undefined, 'We have not initialized the property');
    el.setAttribute('fname', 'Justin');
    assert.equal(el.fname, 'Justin', 'We have set the property from the attribute');
    el.setAttribute('lname', 'Meyer');
    assert.equal(el.lname, 'Meyer', 'We have set the property from the attribute');
  });
  QUnit.test("properties are not set when attribute does not exist", function (assert) {
    var BasicBindingsElement = /*#__PURE__*/function (_StacheElement2) {
      _inherits(BasicBindingsElement, _StacheElement2);

      var _super2 = _createSuper(BasicBindingsElement);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _super2.apply(this, arguments);
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "<h1>{{name}}</h1>";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            name: {
              type: type.maybeConvert(String),
              bind: fromAttribute,
              set: function set(v) {
                return v;
              }
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("no-attribute", BasicBindingsElement);
    var el = document.createElement('no-attribute');
    fixture.appendChild(el);
    assert.strictEqual(el.getAttribute('name'), null, 'We have not initialized the attribute');
    assert.strictEqual(el.name, undefined, 'We have not initialized the property');
  });
  QUnit.test("property is not called multiple times", function (assert) {
    var setCounter = 0;

    var BasicBindingsElement = /*#__PURE__*/function (_StacheElement3) {
      _inherits(BasicBindingsElement, _StacheElement3);

      var _super3 = _createSuper(BasicBindingsElement);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _super3.apply(this, arguments);
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "<h1>{{name}}</h1>";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            name: {
              type: type.maybeConvert(String),
              bind: fromAttribute,
              set: function set(newVal) {
                setCounter++;
                return newVal;
              }
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("setter-multiple-check", BasicBindingsElement);
    var el = document.createElement('setter-multiple-check'); // call setAttribute _before_ appendChild to simulate something like
    // <setter-multiple-check name="Kevin" />
    // being in the page before customElements.define is called

    el.setAttribute('name', 'Kevin');
    fixture.appendChild(el);
    assert.strictEqual(el.getAttribute('name'), 'Kevin', 'We have the attribute');
    assert.strictEqual(el.name, 'Kevin', 'We have initialized the property');
    assert.strictEqual(setCounter, 1, 'We have only called the setter once');
  });
  QUnit.test("camelCase propName", function (assert) {
    var BasicBindingsElement = /*#__PURE__*/function (_StacheElement4) {
      _inherits(BasicBindingsElement, _StacheElement4);

      var _super4 = _createSuper(BasicBindingsElement);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _super4.apply(this, arguments);
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            firstName: {
              type: type.convert(String),
              bind: fromAttribute
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("camel-case", BasicBindingsElement);
    var el = document.createElement('camel-case');
    fixture.appendChild(el);
    el.setAttribute('first-name', 'Kevin');
    assert.equal(el.firstName, 'Kevin', 'We have the correct property value');
  });
  dev.devOnlyTest("check graph whatchangesme works", function (assert) {
    var BasicBindingsElement = /*#__PURE__*/function (_StacheElement5) {
      _inherits(BasicBindingsElement, _StacheElement5);

      var _super5 = _createSuper(BasicBindingsElement);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _super5.apply(this, arguments);
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            name: {
              type: type.convert(String),
              bind: fromAttribute
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("what-changes-me", BasicBindingsElement);
    var el = document.createElement('what-changes-me');
    fixture.appendChild(el);
    var propDeps = canReflectDeps.getDependencyDataOf(el, "name").whatChangesMe.mutate.valueDependencies;
    assert.equal(propDeps.size, 1, 'We have the graph data');

    var _iterator = _createForOfIteratorHelper(propDeps),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var dep = _step.value;
        assert.equal(dep[Symbol.for('can.getName')](), 'Observation<FromAttribute<what-changes-me.name>>', 'We have the correct graph dep');
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
}