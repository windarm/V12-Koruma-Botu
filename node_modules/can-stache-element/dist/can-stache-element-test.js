"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var QUnit = require("steal-qunit");

var Scope = require("can-view-scope");

var viewCallbacks = require("can-view-callbacks");

var stacheBindings = require("can-stache-bindings");

var stache = require("can-stache");

var SimpleObservable = require("can-simple-observable");

var StacheElement = require("./can-stache-element");

var type = require("can-type");

var browserSupports = require("../test/helpers").browserSupports;

var canReflect = require("can-reflect");

var dev = require("can-test-helpers").dev;

QUnit.module("can-stache-element");

if (browserSupports.customElements) {
  QUnit.test("basics", function (assert) {
    var fixture = document.querySelector("#qunit-fixture");

    var Input = /*#__PURE__*/function (_StacheElement) {
      _inherits(Input, _StacheElement);

      var _super = _createSuper(Input);

      function Input() {
        _classCallCheck(this, Input);

        return _super.apply(this, arguments);
      }

      _createClass(Input, [{
        key: "handleChange",
        value: function handleChange(val) {
          // call the handler passed in through bindings
          this.handler(val);
        }
      }], [{
        key: "view",
        get: function get() {
          return "<p><input value:from=\"this.inputValue\" on:change=\"this.handleChange(scope.element.value)\"></p>";
        }
      }]);

      return Input;
    }(StacheElement);

    customElements.define("in-put", Input);

    var Basic = /*#__PURE__*/function (_StacheElement2) {
      _inherits(Basic, _StacheElement2);

      var _super2 = _createSuper(Basic);

      function Basic() {
        _classCallCheck(this, Basic);

        return _super2.apply(this, arguments);
      }

      _createClass(Basic, [{
        key: "setFirst",
        value: function setFirst(val) {
          this.first = val;
        }
      }, {
        key: "setLast",
        value: function setLast(val) {
          this.last = val;
        }
      }, {
        key: "fullName",
        get: function get() {
          return "".concat(this.first, " ").concat(this.last);
        }
      }], [{
        key: "view",
        get: function get() {
          return "\n\t\t\t\t\t<in-put inputValue:bind=\"this.first\" handler:from=\"this.setFirst\"></in-put>\n\t\t\t\t\t<in-put inputValue:bind=\"this.last\" handler:from=\"this.setLast\"></in-put>\n\t\t\t\t\t<p>{{this.fullName}}</p>\n\t\t\t\t";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            first: {
              type: String,
              default: "Kevin"
            },
            last: {
              type: String,
              default: "McCallister"
            }
          };
        }
      }]);

      return Basic;
    }(StacheElement);

    customElements.define("basic-app", Basic);
    var el = document.createElement("basic-app");
    fixture.appendChild(el);
    var inputs = el.querySelectorAll("input");
    var firstNameInput = inputs[0];
    var lastNameInput = inputs[1];
    var fullNameP = el.querySelectorAll("p")[2];
    assert.equal(firstNameInput.value, "Kevin", "firstName input has correct default value");
    assert.equal(lastNameInput.value, "McCallister", "lastName input has correct default value");
    assert.equal(fullNameP.innerHTML, "Kevin McCallister", "fullName paragraph has correct default value");
    firstNameInput.value = "Marty";
    firstNameInput.dispatchEvent(new Event("change"));
    assert.equal(fullNameP.innerHTML, "Marty McCallister", "fullName paragraph changes when firstName input changes");
    lastNameInput.value = "McFly";
    lastNameInput.dispatchEvent(new Event("change"));
    assert.equal(fullNameP.innerHTML, "Marty McFly", "fullName paragraph changes when lastName input changes");
  });
  QUnit.test("can be rendered by canViewCallbacks.tagHandler", function (assert) {
    var App = /*#__PURE__*/function (_StacheElement3) {
      _inherits(App, _StacheElement3);

      var _super3 = _createSuper(App);

      function App() {
        _classCallCheck(this, App);

        return _super3.apply(this, arguments);
      }

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return "Hello {{greeting}}";
        }
      }]);

      return App;
    }(StacheElement);

    customElements.define("stache-viewcallbacks-app", App);
    var el = document.createElement("stache-viewcallbacks-app");
    el.setAttribute("greeting:bind", "greeting");
    var scope = new Scope({
      greeting: "World"
    });
    viewCallbacks.tagHandler(el, "stache-viewcallbacks-app", {
      scope: scope
    });
    assert.equal(el.innerHTML, "Hello World");
  });
  QUnit.test("Can initialize with el.initialize()", function (assert) {
    var El = /*#__PURE__*/function (_StacheElement4) {
      _inherits(El, _StacheElement4);

      var _super4 = _createSuper(El);

      function El() {
        _classCallCheck(this, El);

        return _super4.apply(this, arguments);
      }

      _createClass(El, null, [{
        key: "props",
        get: function get() {
          return {
            prop: "default"
          };
        }
      }]);

      return El;
    }(StacheElement);

    customElements.define("stache-element-initialized", El);
    var el = new El();
    el.initialize({
      prop: "value"
    });
    assert.equal(el.prop, "value", "initialized with values provided to initialize");
  });
  QUnit.test("programatically instantiated elements get disconnected when removed", function (assert) {
    var done = assert.async();

    var Person = /*#__PURE__*/function (_StacheElement5) {
      _inherits(Person, _StacheElement5);

      var _super5 = _createSuper(Person);

      function Person() {
        _classCallCheck(this, Person);

        return _super5.apply(this, arguments);
      }

      _createClass(Person, [{
        key: "disconnected",
        value: function disconnected() {
          assert.ok(true, "connected");
          done();
        }
      }], [{
        key: "view",
        get: function get() {
          return "\n\t\t\t\t\t<p>person</p>\n\t\t\t\t";
        }
      }]);

      return Person;
    }(StacheElement);

    customElements.define("per-son", Person);

    var App = /*#__PURE__*/function (_StacheElement6) {
      _inherits(App, _StacheElement6);

      var _super6 = _createSuper(App);

      function App() {
        _classCallCheck(this, App);

        return _super6.apply(this, arguments);
      }

      _createClass(App, null, [{
        key: "view",
        get: function get() {
          return "\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{{#if(person)}}\n\t\t\t\t\t\t\t{{{person}}}\n\t\t\t\t\t\t{{/if}}\n\t\t\t\t\t</p>\n\t\t\t\t";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            showPerson: true,
            person: {
              get: function get() {
                if (this.showPerson) {
                  var person = new Person();
                  person.connect();
                  return person;
                }
              }
            }
          };
        }
      }]);

      return App;
    }(StacheElement);

    customElements.define("person-app", App);
    var app = new App();
    app.connect();
    var nameDiv = app.querySelector("per-son p");
    assert.equal(nameDiv.innerHTML, "person");
    app.showPerson = false;
  });
  QUnit.test("element can be used directly in a stache view", function (assert) {
    var fixture = document.querySelector("#qunit-fixture");
    assert.expect(2);
    var done = assert.async();
    var show = new SimpleObservable(false);

    var El = /*#__PURE__*/function (_StacheElement7) {
      _inherits(El, _StacheElement7);

      var _super7 = _createSuper(El);

      function El() {
        _classCallCheck(this, El);

        return _super7.apply(this, arguments);
      }

      _createClass(El, [{
        key: "connected",
        value: function connected() {
          assert.ok(true, "connected");
        }
      }, {
        key: "disconnected",
        value: function disconnected() {
          assert.ok(true, "disconnected");
          done();
        }
      }]);

      return El;
    }(StacheElement);

    customElements.define("stache-el-in-stache", El);
    var el = new El();
    var frag = stache("\n\t\t\t<div>\n\t\t\t{{#if(show)}}\n\t\t\t\t{{el}}\n\t\t\t{{/if}}\n\t\t\t</div>\n\t\t")({
      el: el,
      show: show
    }); // viewInsert

    show.value = true; // connect

    fixture.appendChild(frag); // teardown

    show.value = false;
  });
  QUnit.test("addEventListener and removeEventListener work for DOM events", function (assert) {
    var done = assert.async();

    var El = /*#__PURE__*/function (_StacheElement8) {
      _inherits(El, _StacheElement8);

      var _super8 = _createSuper(El);

      function El() {
        _classCallCheck(this, El);

        return _super8.apply(this, arguments);
      }

      return El;
    }(StacheElement);

    customElements.define("add-event-listener-el", El);
    var el = new El();
    el.addEventListener("an-event", function handler() {
      el.removeEventListener("an-event", handler);
      el.dispatchEvent(new Event("an-event"));
      assert.ok(true, "addEventListener works");
      done();
    });
    el.dispatchEvent(new Event("an-event"));
  });
  QUnit.test("value() updates", function (assert) {
    var Foo = /*#__PURE__*/function (_StacheElement9) {
      _inherits(Foo, _StacheElement9);

      var _super9 = _createSuper(Foo);

      function Foo() {
        _classCallCheck(this, Foo);

        return _super9.apply(this, arguments);
      }

      _createClass(Foo, null, [{
        key: "view",
        get: function get() {
          return '<span>{{second}}</span>';
        }
      }, {
        key: "props",
        get: function get() {
          return {
            first: "one",
            second: {
              value: function value(_ref) {
                var listenTo = _ref.listenTo,
                    resolve = _ref.resolve;
                resolve(this.first);
                listenTo("first", function (ev, val) {
                  resolve(val);
                });
              }
            }
          };
        }
      }]);

      return Foo;
    }(StacheElement);

    customElements.define('value-should-update', Foo);
    var updated = false;
    var foo = new Foo();
    foo.connect();
    canReflect.onKeyValue(foo, "second", function () {
      updated = true;
    });
    assert.equal(foo.second, "one", "initial value");
    foo.first = "two";
    assert.ok(updated, "onKeyValue called");
    assert.equal(foo.second, "two", "updated"); // Verify it works when there are multiple instances

    var foo2 = new Foo();
    foo2.connect();
    updated = false;
    canReflect.onKeyValue(foo2, "second", function () {
      updated = true;
    });
    assert.equal(foo2.second, "one", "initial value");
    foo2.first = "two";
    assert.ok(updated, "onKeyValue called");
    assert.equal(foo2.second, "two", "updated");
  });
  dev.devOnlyTest("Warns when a property matches an event name", function (assert) {
    var ClickPropEl = /*#__PURE__*/function (_StacheElement10) {
      _inherits(ClickPropEl, _StacheElement10);

      var _super10 = _createSuper(ClickPropEl);

      function ClickPropEl() {
        _classCallCheck(this, ClickPropEl);

        return _super10.apply(this, arguments);
      }

      _createClass(ClickPropEl, null, [{
        key: "props",
        get: function get() {
          return {
            click: String,

            get other() {
              throw new Error('Don\'t get me');
            }

          };
        }
      }]);

      return ClickPropEl;
    }(StacheElement);

    customElements.define("click-prop-should-warn", ClickPropEl);
    var undo = dev.willWarn(/click/);
    new ClickPropEl();
    assert.equal(undo(), 1, "Warned for the 'click' prop");
  });
  dev.devOnlyTest("Warns when a property matches a built in property", function (assert) {
    var ClickPropEl = /*#__PURE__*/function (_StacheElement11) {
      _inherits(ClickPropEl, _StacheElement11);

      var _super11 = _createSuper(ClickPropEl);

      function ClickPropEl() {
        _classCallCheck(this, ClickPropEl);

        return _super11.apply(this, arguments);
      }

      _createClass(ClickPropEl, null, [{
        key: "props",
        get: function get() {
          return {
            tagName: String,

            get other() {
              throw new Error('Don\'t get me');
            }

          };
        }
      }]);

      return ClickPropEl;
    }(StacheElement);

    customElements.define("tag-name-prop-should-warn", ClickPropEl);
    var undo = dev.willWarn(/tagName/);
    new ClickPropEl();
    assert.equal(undo(), 1, "Warned for the 'tagName' prop");
  });
  QUnit.test("bindings run once (#72)", function (assert) {
    var CreateBindingsOnce = /*#__PURE__*/function (_StacheElement12) {
      _inherits(CreateBindingsOnce, _StacheElement12);

      var _super12 = _createSuper(CreateBindingsOnce);

      function CreateBindingsOnce() {
        _classCallCheck(this, CreateBindingsOnce);

        return _super12.apply(this, arguments);
      }

      _createClass(CreateBindingsOnce, null, [{
        key: "props",
        get: function get() {
          return {
            value: Number
          };
        }
      }]);

      return CreateBindingsOnce;
    }(StacheElement);

    customElements.define('create-bindings-once', CreateBindingsOnce);
    var calls = 0;
    stache("<create-bindings-once value:from='this.read()'/>")({
      read: function read() {
        calls++;
        return 1;
      }
    });
    assert.equal(calls, 1, "only called once");
  });
  QUnit.test("initializeViewModel called once for elements rendered with stache", function (assert) {
    var origInitializeViewModel = stacheBindings.behaviors.initializeViewModel;
    var calls = 0;

    stacheBindings.behaviors.initializeViewModel = function () {
      calls++;
      return origInitializeViewModel.apply(this, arguments);
    };

    var InitializeViewModelOnce = /*#__PURE__*/function (_StacheElement13) {
      _inherits(InitializeViewModelOnce, _StacheElement13);

      var _super13 = _createSuper(InitializeViewModelOnce);

      function InitializeViewModelOnce() {
        _classCallCheck(this, InitializeViewModelOnce);

        return _super13.apply(this, arguments);
      }

      _createClass(InitializeViewModelOnce, null, [{
        key: "props",
        get: function get() {
          return {
            num: type.convert(Number)
          };
        }
      }]);

      return InitializeViewModelOnce;
    }(StacheElement);

    customElements.define('initialize-viewmodel-once', InitializeViewModelOnce);
    var frag = stache("<initialize-viewmodel-once />")({});
    document.querySelector("#qunit-fixture").appendChild(frag);
    assert.equal(calls, 1, "only called once");
  });
  QUnit.test("initializeViewModel not called if there are no bindings", function (assert) {
    var origInitializeViewModel = stacheBindings.behaviors.initializeViewModel;
    var calls = 0;

    stacheBindings.behaviors.initializeViewModel = function () {
      calls++;
      return origInitializeViewModel.apply(this, arguments);
    };

    var InitializeViewModelZeroTimes = /*#__PURE__*/function (_StacheElement14) {
      _inherits(InitializeViewModelZeroTimes, _StacheElement14);

      var _super14 = _createSuper(InitializeViewModelZeroTimes);

      function InitializeViewModelZeroTimes() {
        _classCallCheck(this, InitializeViewModelZeroTimes);

        return _super14.apply(this, arguments);
      }

      _createClass(InitializeViewModelZeroTimes, null, [{
        key: "props",
        get: function get() {
          return {
            num: type.convert(Number)
          };
        }
      }]);

      return InitializeViewModelZeroTimes;
    }(StacheElement);

    customElements.define('initialize-viewmodel-zero-times', InitializeViewModelZeroTimes);
    new InitializeViewModelZeroTimes().initialize();
    assert.equal(calls, 0, "initializeViewModel not called");
  });
  QUnit.test("can-template support (#77)", function (assert) {
    var CanGetTemplates = /*#__PURE__*/function (_StacheElement15) {
      _inherits(CanGetTemplates, _StacheElement15);

      var _super15 = _createSuper(CanGetTemplates);

      function CanGetTemplates() {
        _classCallCheck(this, CanGetTemplates);

        return _super15.apply(this, arguments);
      }

      _createClass(CanGetTemplates, null, [{
        key: "view",
        get: function get() {
          return stache("can-get-templates.stache", "{{this.foo( passed='PASSED' )}}");
        }
      }, {
        key: "props",
        get: function get() {
          return {
            inner: "INNER"
          };
        }
      }]);

      return CanGetTemplates;
    }(StacheElement);

    customElements.define('can-get-templates', CanGetTemplates);
    var template = stache("outer.stache", "{{let letScope='LETSCOPE'}}" + "<can-get-templates>" + "<can-template name='foo'>" + "<div class='outer'>{{this.outer}}</div>" + "<div class='let-scope'>{{letScope}}</div>" + "<div class='passed'>{{passed}}</div>" + "</can-template>" + "</can-get-templates>");
    var frag = template({
      outer: "OUTER"
    });
    assert.equal(frag.firstElementChild.querySelector(".outer").innerHTML, "OUTER", "Access OUTER scope");
    assert.equal(frag.firstElementChild.querySelector(".let-scope").innerHTML, "LETSCOPE", "Access let scope scope");
    assert.equal(frag.firstElementChild.querySelector(".passed").innerHTML, "PASSED", "Access passed scope");
  });
  QUnit.test("can-template called outside stache works (#77)", function (assert) {
    var CanGetTemplatesInCode = /*#__PURE__*/function (_StacheElement16) {
      _inherits(CanGetTemplatesInCode, _StacheElement16);

      var _super16 = _createSuper(CanGetTemplatesInCode);

      function CanGetTemplatesInCode() {
        _classCallCheck(this, CanGetTemplatesInCode);

        return _super16.apply(this, arguments);
      }

      _createClass(CanGetTemplatesInCode, [{
        key: "bar",
        value: function bar() {
          return this.foo({
            passed: "PASSED"
          });
        }
      }], [{
        key: "view",
        get: function get() {
          return "{{ this.bar() }}";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            inner: "INNER"
          };
        }
      }]);

      return CanGetTemplatesInCode;
    }(StacheElement);

    customElements.define("can-get-templates-in-code", CanGetTemplatesInCode);
    var template = stache("outer.stache", "{{ let letScope=\"LETSCOPE\" }}\n\t\t\t<can-get-templates-in-code>\n\t\t\t<can-template name=\"foo\">\n\t\t\t\t<div class=\"outer\">{{ this.outer }}</div>\n\t\t\t\t<div class=\"let-scope\">{{ letScope }}</div>\n\t\t\t\t<div class=\"passed\">{{ passed }}</div>\n\t\t\t</can-template>\n\t\t\t</can-get-templates-in-code>");
    var frag = template({
      outer: "OUTER"
    });
    assert.equal(frag.firstElementChild.querySelector(".outer").innerHTML, "OUTER", "Access OUTER scope");
    assert.equal(frag.firstElementChild.querySelector(".let-scope").innerHTML, "LETSCOPE", "Access let scope scope");
    assert.equal(frag.firstElementChild.querySelector(".passed").innerHTML, "PASSED", "Access passed scope");
  });
}