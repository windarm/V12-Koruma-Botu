"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var lifecycleStatusSymbol = Symbol.for("can.lifecycleStatus");
var inSetupSymbol = Symbol.for("can.initializing");
var teardownHandlersSymbol = Symbol.for("can.teardownHandlers");

function defineConfigurableNonEnumerable(obj, prop, value) {
  Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: value
  });
}

module.exports = function mixinLifecycleMethods() {
  var BaseElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;
  return /*#__PURE__*/function (_BaseElement) {
    _inherits(LifecycleElement, _BaseElement);

    var _super = _createSuper(LifecycleElement);

    function LifecycleElement() {
      var _this;

      _classCallCheck(this, LifecycleElement);

      _this = _super.call(this);

      if (arguments.length) {
        throw new Error("can-stache-element: Do not pass arguments to the constructor. Initial property values should be passed to the `initialize` hook.");
      } // add inSetup symbol to prevent events being dispatched


      defineConfigurableNonEnumerable(_assertThisInitialized(_this), inSetupSymbol, true); // add lifecycle status symbol

      defineConfigurableNonEnumerable(_assertThisInitialized(_this), lifecycleStatusSymbol, {
        initialized: false,
        rendered: false,
        connected: false,
        disconnected: false
      }); // add a place to store additional teardownHandlers

      defineConfigurableNonEnumerable(_assertThisInitialized(_this), teardownHandlersSymbol, []);
      return _this;
    } // custom element lifecycle methods


    _createClass(LifecycleElement, [{
      key: "connectedCallback",
      value: function connectedCallback(props) {
        this.initialize(props);
        this.render();
        this.connect();
        return this;
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.disconnect();
        return this;
      } // custom lifecycle methods

    }, {
      key: "initialize",
      value: function initialize(props) {
        var lifecycleStatus = this[lifecycleStatusSymbol];

        if (lifecycleStatus.initialized) {
          return this;
        } // Overwrite ... this means that this initialize
        // can't be inherited (super.initialize).


        this[inSetupSymbol] = true;

        if (_get(_getPrototypeOf(LifecycleElement.prototype), "initialize", this)) {
          _get(_getPrototypeOf(LifecycleElement.prototype), "initialize", this).call(this, props);
        }

        this[inSetupSymbol] = false;
        lifecycleStatus.initialized = true;
        return this;
      }
    }, {
      key: "render",
      value: function render(props) {
        var lifecycleStatus = this[lifecycleStatusSymbol];

        if (lifecycleStatus.rendered) {
          return this;
        }

        if (!lifecycleStatus.initialized) {
          this.initialize(props);
        }

        if (_get(_getPrototypeOf(LifecycleElement.prototype), "render", this)) {
          _get(_getPrototypeOf(LifecycleElement.prototype), "render", this).call(this, props);
        }

        lifecycleStatus.rendered = true;
        return this;
      }
    }, {
      key: "connect",
      value: function connect(props) {
        var lifecycleStatus = this[lifecycleStatusSymbol];

        if (lifecycleStatus.connected) {
          return this;
        }

        if (!lifecycleStatus.initialized) {
          this.initialize(props);
        }

        if (!lifecycleStatus.rendered) {
          this.render(props);
        }

        if (_get(_getPrototypeOf(LifecycleElement.prototype), "connect", this)) {
          _get(_getPrototypeOf(LifecycleElement.prototype), "connect", this).call(this, props);
        }

        if (this.connected) {
          var connectedTeardown = this.connected();

          if (typeof connectedTeardown === "function") {
            this[teardownHandlersSymbol].push(connectedTeardown);
          }
        }

        lifecycleStatus.connected = true;
        lifecycleStatus.disconnected = false;
        return this;
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        var lifecycleStatus = this[lifecycleStatusSymbol];

        if (lifecycleStatus.disconnected) {
          return this;
        }

        if (_get(_getPrototypeOf(LifecycleElement.prototype), "disconnect", this)) {
          _get(_getPrototypeOf(LifecycleElement.prototype), "disconnect", this).call(this);
        }

        if (this.stopListening) {
          this.stopListening();
        }

        var _iterator = _createForOfIteratorHelper(this[teardownHandlersSymbol]),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var handler = _step.value;
            handler.call(this);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (this.disconnected) {
          this.disconnected();
        }

        this[lifecycleStatusSymbol] = {
          initialized: false,
          rendered: false,
          connected: false,
          disconnected: true
        };
        return this;
      }
    }]);

    return LifecycleElement;
  }(BaseElement);
};