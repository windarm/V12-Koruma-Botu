"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var stache = require("can-stache");

var stacheBindings = require("can-stache-bindings");

var domMutate = require("can-dom-mutate");

var domMutateNode = require("can-dom-mutate/node");

var canReflect = require("can-reflect");

var Scope = require("can-view-scope");

var rendererSymbol = Symbol.for("can.stacheRenderer");
var viewInsertSymbol = Symbol.for("can.viewInsert"); // make bindings work

stache.addBindings(stacheBindings);

module.exports = function mixinStacheView() {
  var Base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;

  var StacheClass = /*#__PURE__*/function (_Base) {
    _inherits(StacheClass, _Base);

    var _super = _createSuper(StacheClass);

    function StacheClass() {
      _classCallCheck(this, StacheClass);

      return _super.apply(this, arguments);
    }

    _createClass(StacheClass, [{
      key: "render",
      value: function render(props, renderOptions) {
        if (_get(_getPrototypeOf(StacheClass.prototype), "render", this)) {
          _get(_getPrototypeOf(StacheClass.prototype), "render", this).call(this, props);
        } // cache renderer function so `stache(...)` is only called
        // for the first instance of each StacheElement constructor


        var renderer = this.constructor[rendererSymbol];

        if (!renderer) {
          var view = this.constructor.view;
          var viewName = canReflect.getName(this.constructor) + "View";
          renderer = typeof view === "function" ? view : stache(viewName, view || "");
          this.constructor[rendererSymbol] = renderer;
        }

        var frag = renderer(new Scope(this, null, {
          viewModel: true
        }), renderOptions);
        var viewRoot = this.viewRoot || this;
        domMutateNode.appendChild.call(viewRoot, frag);
      }
    }, {
      key: "connect",
      value: function connect() {
        var _this = this;

        if (_get(_getPrototypeOf(StacheClass.prototype), "connect", this)) {
          _get(_getPrototypeOf(StacheClass.prototype), "connect", this).call(this);
        }

        var removedDisposal = domMutate.onNodeRemoved(this, function () {
          var doc = _this.ownerDocument;
          var rootNode = doc.contains ? doc : doc.documentElement;

          if (!rootNode || !rootNode.contains(_this)) {
            removedDisposal();

            _this.disconnect();
          }
        });
      }
    }, {
      key: viewInsertSymbol,
      value: function value() {
        return this;
      }
    }]);

    return StacheClass;
  }(Base);

  StacheClass.prototype[Symbol.for("can.preventDataBindings")] = true;
  return StacheClass;
};