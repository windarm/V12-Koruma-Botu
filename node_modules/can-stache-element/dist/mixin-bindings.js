"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var keyObservable = require("can-simple-observable/key/key");

var canReflect = require("can-reflect");

var Bind = require("can-bind");

var getValueSymbol = Symbol.for("can.getValue");
var setValueSymbol = Symbol.for("can.setValue");
var metaSymbol = Symbol.for("can.meta");

module.exports = function mixinBindings() {
  var Base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;
  return /*#__PURE__*/function (_Base) {
    _inherits(BindingsClass, _Base);

    var _super = _createSuper(BindingsClass);

    function BindingsClass() {
      _classCallCheck(this, BindingsClass);

      return _super.apply(this, arguments);
    }

    _createClass(BindingsClass, [{
      key: "bindings",
      value: function bindings(_bindings) {
        var _this = this;

        if (this[metaSymbol] === undefined) {
          this[metaSymbol] = {};
        }

        var bindingsObservables = {};
        canReflect.eachKey(_bindings, function (parent, propName) {
          // Create an observable for reading/writing the viewModel
          // even though it doesn't exist yet.
          var child = keyObservable(_this, propName);
          bindingsObservables[propName] = {
            parent: parent,
            child: child
          };
        });
        this[metaSymbol]._connectedBindings = bindingsObservables;
        return this;
      }
    }, {
      key: "initialize",
      value: function initialize(props) {
        var _this2 = this;

        var savedBindings = this[metaSymbol] && this[metaSymbol]._connectedBindings;

        if (savedBindings) {
          props = props || {};

          if (this[metaSymbol]._bindings === undefined) {
            this[metaSymbol]._bindings = [];
          }

          canReflect.eachKey(savedBindings, function (binding, propName) {
            var child = binding.child,
                parent = binding.parent;
            var canGetParentValue = parent != null && !!parent[getValueSymbol];
            var canSetParentValue = parent != null && !!parent[setValueSymbol]; // If we can get or set the value, then we’ll create a binding

            if (canGetParentValue || canSetParentValue) {
              // Create the binding similar to what’s in can-stache-bindings
              var canBinding = new Bind({
                child: child,
                parent: parent,
                queue: "dom",
                element: _this2,
                //!steal-remove-start
                // For debugging: the names that will be assigned to the updateChild
                // and updateParent functions within can-bind
                updateChildName: "update <" + _this2.nodeName.toLowerCase() + ">." + propName,
                updateParentName: "update " + canReflect.getName(parent) + " from <" + _this2.nodeName.toLowerCase() + ">." + propName //!steal-remove-end

              });

              _this2[metaSymbol]._bindings.push({
                binding: canBinding,
                siblingBindingData: {
                  parent: {
                    source: "scope",
                    exports: canGetParentValue
                  },
                  child: {
                    source: "viewModel",
                    exports: canSetParentValue,
                    name: propName
                  },
                  bindingAttributeName: propName
                }
              });
            } else {
              // Can’t get or set the value, so assume it’s not an observable
              props[propName] = parent;
            }
          });
          this[metaSymbol].other = true;
        }

        if (_get(_getPrototypeOf(BindingsClass.prototype), "initialize", this)) {
          _get(_getPrototypeOf(BindingsClass.prototype), "initialize", this).call(this, props);
        }
      }
    }, {
      key: "render",
      value: function render(props, renderOptions) {
        var viewRoot = this.viewRoot || this;
        viewRoot.innerHTML = "";

        if (_get(_getPrototypeOf(BindingsClass.prototype), "render", this)) {
          _get(_getPrototypeOf(BindingsClass.prototype), "render", this).call(this, props, renderOptions);
        }
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        delete this[metaSymbol]._bindings;

        if (_get(_getPrototypeOf(BindingsClass.prototype), "disconnect", this)) {
          _get(_getPrototypeOf(BindingsClass.prototype), "disconnect", this).call(this);
        }
      }
    }]);

    return BindingsClass;
  }(Base);
};