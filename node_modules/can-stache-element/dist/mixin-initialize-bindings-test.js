"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var QUnit = require("steal-qunit");

var mixinInitializeBindings = require("./mixin-initialize-bindings");

QUnit.module("can-stache-element - mixin-initialize-bindings");
QUnit.test("disconnect calls super disconnect", function (assert) {
  assert.expect(1);

  var Obj = /*#__PURE__*/function () {
    function Obj() {
      _classCallCheck(this, Obj);
    }

    _createClass(Obj, [{
      key: "disconnect",
      value: function disconnect() {
        assert.ok(true, "disconnect called");
      }
    }]);

    return Obj;
  }();

  var InitializeBindingObj = mixinInitializeBindings(Obj);
  var obj = new InitializeBindingObj();
  obj.disconnect();
});
QUnit.test("initialize calls super initialize", function (assert) {
  assert.expect(1);
  var props = {
    name: "Matt"
  };

  var Obj = /*#__PURE__*/function () {
    function Obj() {
      _classCallCheck(this, Obj);
    }

    _createClass(Obj, [{
      key: "initialize",
      value: function initialize(_props) {
        assert.equal(_props, props, "initialize called");
      }
    }]);

    return Obj;
  }();

  var InitializeBindingObj = mixinInitializeBindings(Obj);
  var obj = new InitializeBindingObj();
  obj.initialize(props);
});