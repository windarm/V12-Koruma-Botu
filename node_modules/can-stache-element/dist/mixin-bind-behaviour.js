"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require("can-observable-mixin"),
    mixins = _require.mixins;

var metaSymbol = Symbol.for("can.meta"); // `attributeChangedCallback` cannot be overwritten so we need to create a named
// function to check if we have had a `attributeChangedCallback` set.

function baseAttributeChangedCallback() {
  /* jshint validthis: true */
  if (this.attributeChangedCallback !== baseAttributeChangedCallback) {
    // `this.attributeChangedCallback` is being set up within `can-observable-bindings`
    this.attributeChangedCallback.apply(this, arguments);
  }
}

module.exports = function mixinBindBehaviour() {
  var Base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLElement;

  var BindingPropsClass = /*#__PURE__*/function (_Base) {
    _inherits(BindingPropsClass, _Base);

    var _super = _createSuper(BindingPropsClass);

    function BindingPropsClass() {
      _classCallCheck(this, BindingPropsClass);

      return _super.apply(this, arguments);
    }

    _createClass(BindingPropsClass, [{
      key: "initialize",
      value: function initialize(props) {
        var _this = this;

        if (this[metaSymbol] === undefined) {
          this[metaSymbol] = {};
        }

        if (this[metaSymbol]._bindings === undefined) {
          this[metaSymbol]._bindings = [];
        } // `_uninitializedBindings` are being set within `observedAttributes` which creates the bindings


        Object.keys(this.constructor[metaSymbol]._uninitializedBindings).forEach(function (propName) {
          var binding = _this.constructor[metaSymbol]._uninitializedBindings[propName](_this); // Add bindings to the instance `metaSymbol` to be set up during `mixin-initialize-bindings`


          _this[metaSymbol]._bindings.push({
            binding: binding,
            siblingBindingData: {
              parent: {
                source: "scope",
                exports: true
              },
              child: {
                source: "viewModel",
                exports: true,
                name: propName
              },
              bindingAttributeName: propName
            }
          });
        });

        if (_get(_getPrototypeOf(BindingPropsClass.prototype), "initialize", this)) {
          _get(_getPrototypeOf(BindingPropsClass.prototype), "initialize", this).call(this, props);
        }
      }
    }]);

    return BindingPropsClass;
  }(Base); // To prevent inifinite loop, use a named function so we can differentiate
  // make it writable so it can be set elsewhere  


  Object.defineProperty(BindingPropsClass.prototype, 'attributeChangedCallback', {
    value: baseAttributeChangedCallback,
    writable: true
  });
  return BindingPropsClass;
}; // We can't set `observedAttributes` on the `StacheElement.prototype` as static properties are
// not copied over with `Object.create`


module.exports.initializeObservedAttributes = function initializeObservedAttributes(ctr) {
  Object.defineProperty(ctr, 'observedAttributes', {
    get: function get() {
      var _this2 = this;

      // We only want to return `observedAttributes` if we have a `bind` on the
      // property definition
      var hasBindDefinition = false; // Run finalizeClass to set up the property definitions

      mixins.finalizeClass(this);

      if (this[metaSymbol] === undefined) {
        this[metaSymbol] = {};
      }

      if (this[metaSymbol]._uninitializedBindings === undefined) {
        this[metaSymbol]._uninitializedBindings = {};
      } // Check that we have property definitions


      var definitions = this.prototype._define && this.prototype._define.definitions;

      if (definitions) {
        // Run through all defitions so we can check if they have a `bind` function
        Object.keys(definitions).forEach(function (propName) {
          var definition = definitions[propName];

          if (typeof definition.bind === 'function') {
            var bindFn = definition.bind(propName, _this2); // Set up the bindings so that they can be called during initialize
            // to setup binding starts

            _this2[metaSymbol]._uninitializedBindings[propName] = bindFn;
            hasBindDefinition = true;
          }
        });
      } // Only return `this.observedAttributes` if we have binds otherwise
      // we create an inifinite loop


      return hasBindDefinition ? this.observedAttributes : [];
    }
  });
};